# -*- coding: utf-8 -*-
"""Agente de currículo - 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OYIETyeLNs22hajLg7xO8rfLwWLM0rhF
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -q google-genai


%pip install -q google-adk
    
%pip install flask-cors

%pip install Flask
from flask import Flask, request, jsonify

%pip install pyngrok
from pyngrok import ngrok

from flask import Flask, request, jsonify
from flask_cors import CORS  # Importe o CORS
from google.adk.agents import Agent
from google.genai import types
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
import os
from google.colab import userdata
from google import genai
from pyngrok import ngrok

import os
from google.colab import userdata
from google import genai

import ipywidgets as widgets
from IPython.display import display, Markdown

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
client = genai.Client()
MODEL_ID = "gemini-2.0-flash"

def agente_adequador_curriculo():
    adequador = Agent(
        name="agente_adequador_curriculo",
        model=MODEL_ID,
        description="Agente que ajuda a adequar currículos a descrições de vagas, focando em palavras-chave relevantes.",
        instruction="""
        Você é um especialista em recrutamento e análise de currículos por IA. Sua tarefa é analisar o currículo fornecido e a descrição da vaga.
        Com base na descrição da vaga, identifique as palavras-chave e habilidades mais importantes que uma IA de recrutamento pode procurar.
        Então, revise o currículo e sugira como ele pode ser levemente ajustado para destacar essas palavras-chave e habilidades,
        SE ELAS JÁ ESTIVEREM PRESENTES no currículo do candidato.

        É crucial que você NÃO INVENTE informações ou habilidades que o candidato não possui.
        Se o currículo já estiver bem alinhado com a vaga, ou se não houver oportunidades de ajuste sem inventar informações,
        você deve indicar isso claramente.

        Se houver seções do currículo que poderiam ser melhoradas em termos de clareza ou destaque das habilidades relevantes para a vaga,
        sinta-se à vontade para sugerir essas melhorias de forma concisa.

        Mantenha um tom profissional e útil, focando em fornecer sugestões práticas e éticas.
        """,
    )
    return adequador

def adequar_curriculo(agente: Agent, curriculo_texto: str, descricao_vaga: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agente.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agente, app_name=agente.name, session_service=session_service)
    content = types.Content(role="user", parts=[
        types.Part(text=f"Currículo:\n{curriculo_texto}\n\nDescrição da Vaga:\n{descricao_vaga}")
    ])

    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text + "\n"
    return final_response

def interface_usuario():
    # Widgets para o usuário colar o conteúdo do currículo e a descrição da vaga
    curriculo_widget = widgets.Textarea(description="Conteúdo do Currículo:")
    descricao_vaga_widget = widgets.Textarea(description="Descrição da vaga:")
    botao_enviar = widgets.Button(description="Analisar Currículo")
    saida = widgets.Output()
    status_carregamento = widgets.Label(value="") # Novo widget para o status de carregamento

    def ao_clicar_botao(b):
        with saida:
            saida.clear_output()
            status_carregamento.value = "Carregando..." # Exibe a mensagem de carregamento
            texto_curriculo = curriculo_widget.value
            descricao_vaga = descricao_vaga_widget.value

            if not texto_curriculo or not descricao_vaga:
                print("Por favor, cole o conteúdo do currículo e a descrição da vaga.")
                status_carregamento.value = "" # Limpa a mensagem de carregamento
                return

            agente = agente_adequador_curriculo()
            resultado = adequar_curriculo(agente, texto_curriculo, descricao_vaga)
            status_carregamento.value = "" # Limpa a mensagem de carregamento após a conclusão
            print("\n--- Sugestões de Adequação do Currículo ---\n")
            display(Markdown(resultado))

    botao_enviar.on_click(ao_clicar_botao)
    display(curriculo_widget, descricao_vaga_widget, botao_enviar, status_carregamento, saida) # Exibe o widget de status

# Executar a interface do usuário
interface_usuario()
